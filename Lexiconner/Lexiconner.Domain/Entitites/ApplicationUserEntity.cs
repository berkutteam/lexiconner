using AspNetCore.Identity.MongoDbCore.Models;
using IdentityModel;
using Lexiconner.Domain.Config;
using Lexiconner.Domain.Dtos.Users;
using Lexiconner.Domain.Entitites.Base;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using MongoDB.Bson.Serialization.IdGenerators;
using MongoDbGenericRepository.Attributes;
using MongoDbGenericRepository.Utils;
using Newtonsoft.Json;
using NUlid;
using NUlid.Rng;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;

namespace Lexiconner.Domain.Entitites
{
    [CollectionName(MongoConfig.IdentityUsers)]
    public class ApplicationUserEntity : MongoIdentityUser<string>, IIdentifiableEntity
    {
        public ApplicationUserEntity()
        {
            // // Contrib.Microsoft.AspNetCore.Identity.MongoDB by thrixton (uses Mongo ObjectId)
            // don't use custom id because BsonRepresentation(BsonType.ObjectId) applied in base class
            // and it must be 24 digit hex string that is generated by MongoDb
            // Id = Ulid.NewUlid(new NUlid.Rng.CSUlidRng()).ToString();

            // AspNetCore.Identity.MongoDbCore by Alexandre Spieser (allows to set custom Ids)
            // uses IdGenerator to generate Id of type TKEY. Supported types: Guid, Int16, Int32, Int64, String (Guid), ObjectId
            // we can rewrite Id in constructor as it is intialised in base constructor
            Id = ObjectId.GenerateNewId().ToString();

            LearningLanguages = new List<ApplicationUserEntityLearningLanguage>();
        }

        //[BsonId]
        //[BsonRepresentation(BsonType.ObjectId)]
        //public override string Id { get; set; }

        /// <summary>
        /// User is used for demo
        /// NB: This prop doesn't go to DB
        /// </summary>
        [JsonIgnore]
        [BsonIgnore]
        public bool IsDemo { get; set; }

        public string Name { get; set; }

        /// <summary>
        /// True - create imported data for user
        /// </summary>
        public bool IsImportInitialData { get; set; }

        /// <summary>
        /// True - existing items will be replaced with ones from the seed
        /// </summary>
        [JsonIgnore]
        [BsonIgnore]
        public bool IsUpdateExistingDataOnSeed { get; set; }

        public string NativeLanguageCode { get; set; }

        public List<ApplicationUserEntityLearningLanguage> LearningLanguages { get; set; }

        #region Helpers

        public void AddOrUpdateLearningLanguage(string languageCode, bool? isSelected, bool? isSelectedForBrowserExtension)
        {
            foreach (var item in LearningLanguages)
            {
                if (isSelected != null)
                {
                    item.IsSelected = false;
                }
                if (isSelectedForBrowserExtension != null)
                {
                    item.IsSelectedForBrowserExtension = false;
                }
            }
            var existing = LearningLanguages.FirstOrDefault(x => x.LanguageCode == languageCode);
            if(existing == null)
            {
                existing = new ApplicationUserEntityLearningLanguage()
                {
                    LanguageCode = languageCode,
                };
                LearningLanguages.Add(existing);
            }
            if (isSelected != null)
            {
                existing.IsSelected = isSelected.Value;
            }
            if (isSelectedForBrowserExtension != null)
            {
                existing.IsSelectedForBrowserExtension = isSelectedForBrowserExtension.Value;
            }
        }

        public void UpdateSelf(ProfileUpdateDto dto)
        {
            this.Name = dto.Name;
            this.NativeLanguageCode = dto.NativeLanguageCode;

            this.UpdateOrCreateClaim(JwtClaimTypes.Name, this.Name, dto.Name);
        }

        public void UpdateOrCreateClaim(string type, string oldValue, string newValue)
        {
            var exsiting = this.Claims.FirstOrDefault(x => x.Type == type);
            if (exsiting != null)
            {
                exsiting.Value = newValue;
            }
            else
            {
                this.Claims.Add(new MongoClaim()
                {
                    Type = type,
                    Value = newValue,
                    Issuer = null,
                });
            }
        }

        #endregion
    }

    public class ApplicationUserEntityLearningLanguage
    {
        public string LanguageCode { get; set; }
        public string SourceLanguageCode { get; set; }
        public string TargetLanguageCode { get; set; }
        public bool IsSelected { get; set; }
        public bool IsSelectedForBrowserExtension { get; set; }
    }
}
